{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet NotesComponent = class NotesComponent {\n  constructor(notebook) {\n    this.notebook = notebook;\n    this.editMode = false;\n    notebook.getNotes().subscribe(notes => {\n      this.notesList = notes;\n    });\n    notebook.getTags().subscribe(tags => {\n      this.tagsList = tags;\n    });\n    //notebook.getNoteTags(this.noteId).subscribe(tags => {\n    //  this.noteTagsList = tags;\n    //})\n  }\n  //список тегов\n  onOptionsSelected() {\n    console.log(this.selected);\n    this.filtered = this.tagsList.filter(t => t.tagText == this.selected);\n  }\n  onNoteCreate(note) {\n    this.notebook.saveNote(note);\n    this.notebook.getNotes().subscribe(notes => {\n      this.notesList = notes;\n    });\n  }\n  getNoteTags(noteId) {\n    //TO DO получить теги заметки\n    //  return this.tagsList?.filter(x => x.tagId ==\n    //    this.noteTagsList[{\"tagId\"}])\n  }\n  onDeleteNote(noteId) {\n    this.notebook.deleteNote(noteId);\n    this.notebook.getNotes().subscribe(notes => {\n      this.notesList = notes;\n    });\n  }\n  onEditNote(noteId) {\n    let currentNote = this.notesList?.find(n => {\n      return n.noteId === noteId;\n    });\n    console.log(currentNote);\n    console.log(this.form);\n    this.form?.setValue({\n      noteDate: currentNote?.reminderDate,\n      noteHeader: currentNote?.noteHeader,\n      noteTag: currentNote?.notesTags,\n      noteText: currentNote?.noteText\n    });\n    this.editMode = true;\n  }\n};\n__decorate([ViewChild('noteForm')], NotesComponent.prototype, \"form\", void 0);\nNotesComponent = __decorate([Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.css']\n})], NotesComponent);\nexport { NotesComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,eAAe;AAW7C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAczBC,YAAmBC,QAAyB;IAAzB,aAAQ,GAARA,QAAQ;IAJ3B,aAAQ,GAAY,KAAK;IAMvBA,QAAQ,CAACC,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MACpC,IAAI,CAACC,SAAS,GAAGD,KAAK;IACxB,CAAC,CAAC;IAEFH,QAAQ,CAACK,OAAO,EAAE,CAACH,SAAS,CAACI,IAAI,IAAG;MAClC,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CAAC;IAEF;IACA;IACA;EAEF;EAEA;EACAE,iBAAiB;IACfC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,QAAQ,CAAC;IAC1B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACL,QAAQ,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,IAAI,IAAI,CAACJ,QAAQ,CAAC;EACvE;EAEAK,YAAY,CAACC,IAAuG;IAClH,IAAI,CAACjB,QAAQ,CAACkB,QAAQ,CAACD,IAAI,CAAC;IAC5B,IAAI,CAACjB,QAAQ,CAACC,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MACzC,IAAI,CAACC,SAAS,GAAGD,KAAK;IACxB,CAAC,CAAC;EACJ;EAEAgB,WAAW,CAACC,MAAc;IACxB;IACA;IACA;EAAA;EAGFC,YAAY,CAACD,MAAc;IACzB,IAAI,CAACpB,QAAQ,CAACsB,UAAU,CAACF,MAAM,CAAC;IAChC,IAAI,CAACpB,QAAQ,CAACC,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MACzC,IAAI,CAACC,SAAS,GAAGD,KAAK;IACxB,CAAC,CAAC;EACJ;EAEAoB,UAAU,CAACH,MAAc;IACvB,IAAII,WAAW,GAAG,IAAI,CAACpB,SAAS,EAAEqB,IAAI,CAAEC,CAAC,IAAI;MAAG,OAAOA,CAAC,CAACN,MAAM,KAAKA,MAAM;IAAC,CAAC,CAAC;IAC7EX,OAAO,CAACC,GAAG,CAACc,WAAW,CAAC;IACxBf,OAAO,CAACC,GAAG,CAAC,IAAI,CAACiB,IAAI,CAAC;IACtB,IAAI,CAACA,IAAI,EAAEC,QAAQ,CAAC;MAClBC,QAAQ,EAAEL,WAAW,EAAEM,YAAY;MACnCC,UAAU,EAAEP,WAAW,EAAEO,UAAU;MACnCC,OAAO,EAAER,WAAW,EAAES,SAAS;MAC/BC,QAAQ,EAAEV,WAAW,EAAEU;KACxB,CAAC;IACF,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;CAED;AA1DwBC,YAAtBvC,SAAS,CAAC,UAAU,CAAC,4CAA0B;AAXrCC,cAAc,eAL1BF,SAAS,CAAC;EACTyC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWzC,cAAc,CAqE1B;SArEYA,cAAc","names":["Component","ViewChild","NotesComponent","constructor","notebook","getNotes","subscribe","notes","notesList","getTags","tags","tagsList","onOptionsSelected","console","log","selected","filtered","filter","t","tagText","onNoteCreate","note","saveNote","getNoteTags","noteId","onDeleteNote","deleteNote","onEditNote","currentNote","find","n","form","setValue","noteDate","reminderDate","noteHeader","noteTag","notesTags","noteText","editMode","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\sasha\\source\\repos\\AngularNotes\\ClientApp\\src\\app\\notes\\notes.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\r\nimport { NotebookService } from '../services/notebook.service';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-notes',\r\n  templateUrl: './notes.component.html',\r\n  styleUrls: ['./notes.component.css']\r\n})\r\nexport class NotesComponent {\r\n\r\n\r\n\r\n  public notesList: [{ noteId: number; noteHeader: string; noteText: string; reminderDate: Date; notesTags: [] }] | undefined;\r\n  public tagsList!: [{ tagId: number; tagText: string; notesTags: [] }];\r\n  public noteTagsList: [{ id: number; tagId: number; noteId: number; }] | undefined;\r\n  public noteId!: number;\r\n  selected: any;\r\n  filtered: any;\r\n  editMode: boolean = false;\r\n  @ViewChild('noteForm') form: NgForm | undefined;\r\n\r\n\r\n  constructor(public notebook: NotebookService) {\r\n\r\n    notebook.getNotes().subscribe(notes => {\r\n      this.notesList = notes;\r\n    })\r\n\r\n    notebook.getTags().subscribe(tags => {\r\n      this.tagsList = tags;\r\n    })\r\n\r\n    //notebook.getNoteTags(this.noteId).subscribe(tags => {\r\n    //  this.noteTagsList = tags;\r\n    //})\r\n\r\n  }\r\n\r\n  //список тегов\r\n  onOptionsSelected() {\r\n    console.log(this.selected);\r\n    this.filtered = this.tagsList.filter(t => t.tagText == this.selected);\r\n  }\r\n\r\n  onNoteCreate(note: [{/* noteId: number;*/ noteHeader: string; noteText: string; reminderDate: Date; notesTags: [] }]) {\r\n    this.notebook.saveNote(note);\r\n    this.notebook.getNotes().subscribe(notes => {\r\n      this.notesList = notes;\r\n    })\r\n  }\r\n\r\n  getNoteTags(noteId: number) {\r\n    //TO DO получить теги заметки\r\n    //  return this.tagsList?.filter(x => x.tagId ==\r\n    //    this.noteTagsList[{\"tagId\"}])\r\n  }\r\n\r\n  onDeleteNote(noteId: number) {\r\n    this.notebook.deleteNote(noteId);\r\n    this.notebook.getNotes().subscribe(notes => {\r\n      this.notesList = notes;\r\n    })\r\n  }\r\n\r\n  onEditNote(noteId: number) {\r\n    let currentNote = this.notesList?.find((n) => { return n.noteId === noteId });\r\n    console.log(currentNote);\r\n    console.log(this.form);\r\n    this.form?.setValue({\r\n      noteDate: currentNote?.reminderDate,\r\n      noteHeader: currentNote?.noteHeader,\r\n      noteTag: currentNote?.notesTags,\r\n      noteText: currentNote?.noteText\r\n    });\r\n    this.editMode = true;\r\n  }\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}